#!/bin/sh

# tts - Text-to-speech CLI using ElevenLabs API
# Reads text from stdin and outputs audio to stdout

API_KEY="${ELEVENLABS_API_KEY:-}"
VOICE_ID="${TTS_VOICE_ID:-21m00Tcm4TlvDq8ikWAM}"
MODEL_ID="${TTS_MODEL_ID:-eleven_monolingual_v1}"
OUTPUT_FORMAT="${TTS_OUTPUT_FORMAT:-mp3_44100_128}"
API_URL="https://api.elevenlabs.io/v1/text-to-speech"
DEBUG="${TTS_DEBUG:-}"
CHUNK_SIZE="${TTS_CHUNK_SIZE:-5000}"
PLAY_AUDIO=""
OPTIMIZE_STREAMING_LATENCY="${TTS_OPTIMIZE_STREAMING_LATENCY:-1}"

STABILITY="${TTS_STABILITY:-0.5}"
SIMILARITY_BOOST="${TTS_SIMILARITY_BOOST:-0.75}"
STYLE="${TTS_STYLE:-0.0}"
USE_SPEAKER_BOOST="${TTS_USE_SPEAKER_BOOST:-true}"

SEED="${TTS_SEED:-}"
PREVIOUS_TEXT="${TTS_PREVIOUS_TEXT:-}"
NEXT_TEXT="${TTS_NEXT_TEXT:-}"
PREVIOUS_REQUEST_IDS="${TTS_PREVIOUS_REQUEST_IDS:-}"
NEXT_REQUEST_IDS="${TTS_NEXT_REQUEST_IDS:-}"

while [ "$#" -gt 0 ]; do
    case "$1" in
        -k|--api-key)
            API_KEY="$2"
            shift 2
            ;;
        -v|--voice)
            VOICE_ID="$2"
            shift 2
            ;;
        -m|--model)
            MODEL_ID="$2"
            shift 2
            ;;
        -f|--format)
            OUTPUT_FORMAT="$2"
            shift 2
            ;;
        -d|--debug)
            DEBUG=1
            shift
            ;;
        -c|--chunk-size)
            CHUNK_SIZE="$2"
            shift 2
            ;;
        -p|--play)
            PLAY_AUDIO=1
            shift
            ;;
        -l|--latency)
            OPTIMIZE_STREAMING_LATENCY="$2"
            shift 2
            ;;
        --stability)
            STABILITY="$2"
            shift 2
            ;;
        --similarity-boost)
            SIMILARITY_BOOST="$2"
            shift 2
            ;;
        --style)
            STYLE="$2"
            shift 2
            ;;
        --speaker-boost)
            USE_SPEAKER_BOOST="$2"
            shift 2
            ;;
        --seed)
            SEED="$2"
            shift 2
            ;;
        --previous-text)
            PREVIOUS_TEXT="$2"
            shift 2
            ;;
        --next-text)
            NEXT_TEXT="$2"
            shift 2
            ;;
        --previous-request-ids)
            PREVIOUS_REQUEST_IDS="$2"
            shift 2
            ;;
        --next-request-ids)
            NEXT_REQUEST_IDS="$2"
            shift 2
            ;;
        -h|--help)
            cat >&2 <<EOF
Usage: tts [OPTIONS] < input.txt > output.mp3

Convert text to speech using ElevenLabs API.

EXAMPLES:
    echo "Hello world" | tts > hello.mp3
    cat book.txt | tts -v EXAVITQu4vr4xnSDxMaL > book.mp3
    
    # Play audio directly (macOS)
    echo "Hello world" | tts --play
    
    # Process large files with streaming
    cat large_book.txt | tts > book.mp3
    
    # Debug API issues
    echo "test" | tts -d > test.mp3

OPTIONS:
    -k, --api-key KEY         ElevenLabs API key (or set ELEVENLABS_API_KEY)
    -v, --voice ID            Voice ID (default: 21m00Tcm4TlvDq8ikWAM)
    -m, --model ID            Model ID (default: eleven_monolingual_v1)
    -f, --format FORMAT       Output format (default: mp3_44100_128)
    -c, --chunk-size SIZE     Characters per chunk for streaming (default: 5000)
    -d, --debug              Enable debug output
    -p, --play               Play audio directly (macOS only)
    -l, --latency LEVEL      Optimize streaming latency 0-4 (default: 1)
    
    --stability FLOAT        Voice stability 0.0-1.0 (default: 0.5)
    --similarity-boost FLOAT Voice similarity boost 0.0-1.0 (default: 0.75)
    --style FLOAT            Speaking style intensity 0.0-1.0 (default: 0.0)
    --speaker-boost BOOL     Enable speaker boost true/false (default: true)
    --seed INTEGER           Seed for reproducible generation
    --previous-text TEXT     Previous text context for better pronunciation
    --next-text TEXT         Next text context for better pronunciation
    --previous-request-ids   Comma-separated previous request IDs
    --next-request-ids       Comma-separated next request IDs
    
    -h, --help               Show this help message
    
ENVIRONMENT VARIABLES:
    ELEVENLABS_API_KEY              Default API key
    TTS_VOICE_ID                   Default voice ID
    TTS_MODEL_ID                   Default model ID
    TTS_OUTPUT_FORMAT              Default output format
    TTS_DEBUG                      Enable debug output (set to 1)
    TTS_CHUNK_SIZE                 Default chunk size for streaming
    TTS_OPTIMIZE_STREAMING_LATENCY Default latency optimization (0-4)
    TTS_STABILITY                  Default voice stability (0.0-1.0)
    TTS_SIMILARITY_BOOST           Default similarity boost (0.0-1.0)
    TTS_STYLE                      Default speaking style (0.0-1.0)
    TTS_USE_SPEAKER_BOOST          Default speaker boost (true/false)
    TTS_SEED                       Default seed for reproducible generation
    TTS_PREVIOUS_TEXT              Default previous text context
    TTS_NEXT_TEXT                  Default next text context
    TTS_PREVIOUS_REQUEST_IDS       Default previous request IDs
    TTS_NEXT_REQUEST_IDS           Default next request IDs
EOF
            exit 0
            ;;
        *)
            echo "Error: Unknown option: $1" >&2
            exit 1
            ;;
    esac
done

debug() {
    if [ -n "$DEBUG" ]; then
        echo "[DEBUG] $*" >&2
    fi
}

if [ -z "$API_KEY" ]; then
    echo "Error: API key required. Set ELEVENLABS_API_KEY or use -k option." >&2
    exit 1
fi

debug "API Key: ${API_KEY:0:10}..."
debug "Voice ID: $VOICE_ID"
debug "Model ID: $MODEL_ID"
debug "Output Format: $OUTPUT_FORMAT"
debug "Chunk Size: $CHUNK_SIZE"
debug "Optimize Streaming Latency: $OPTIMIZE_STREAMING_LATENCY"
debug "Stability: $STABILITY"
debug "Similarity Boost: $SIMILARITY_BOOST"
debug "Style: $STYLE"
debug "Speaker Boost: $USE_SPEAKER_BOOST"
debug "Seed: $SEED"
debug "Previous Text: ${PREVIOUS_TEXT:0:50}..."
debug "Next Text: ${NEXT_TEXT:0:50}..."

escape_json() {
    printf '%s' "$1" | sed 's/\\/\\\\/g; s/"/\\"/g; s/	/\\t/g' | tr '\n' ' ' | sed 's/  */ /g'
}

process_chunk() {
    local text="$1"
    local chunk_num="$2"
    
    if [ -z "$text" ]; then
        return 0
    fi
    
    debug "Processing chunk $chunk_num (${#text} chars)"
    
    local escaped_text=$(escape_json "$text")
    local temp_file=$(mktemp)
    
    cat > "$temp_file" <<EOF
{
    "text": "$escaped_text",
    "model_id": "$MODEL_ID",
    "voice_settings": {
        "stability": $STABILITY,
        "similarity_boost": $SIMILARITY_BOOST,
        "style": $STYLE,
        "use_speaker_boost": $USE_SPEAKER_BOOST
    },
    "output_format": "$OUTPUT_FORMAT"$([ -n "$SEED" ] && echo ",
    \"seed\": $SEED")$([ -n "$PREVIOUS_TEXT" ] && echo ",
    \"previous_text\": \"$(escape_json "$PREVIOUS_TEXT")\"")$([ -n "$NEXT_TEXT" ] && echo ",
    \"next_text\": \"$(escape_json "$NEXT_TEXT")\"")$([ -n "$PREVIOUS_REQUEST_IDS" ] && echo ",
    \"previous_request_ids\": [$(echo "$PREVIOUS_REQUEST_IDS" | sed 's/,/", "/g; s/^/"/; s/$/"/')]")$([ -n "$NEXT_REQUEST_IDS" ] && echo ",
    \"next_request_ids\": [$(echo "$NEXT_REQUEST_IDS" | sed 's/,/", "/g; s/^/"/; s/$/"/')]")
}
EOF
    
    if [ -n "$DEBUG" ]; then
        debug "Request body:"
        cat "$temp_file" >&2
    fi
    
    if [ -n "$PLAY_AUDIO" ]; then
        if command -v afplay >/dev/null 2>&1; then
            local audio_temp=$(mktemp).mp3
            local headers_file=$(mktemp)
            local http_code=$(curl -w "%{http_code}" -o "$audio_temp" -D "$headers_file" -X POST \
                "${API_URL}/${VOICE_ID}/stream?optimize_streaming_latency=${OPTIMIZE_STREAMING_LATENCY}" \
                -H "Content-Type: application/json" \
                -H "xi-api-key: ${API_KEY}" \
                -d "@$temp_file" \
                $([ -n "$DEBUG" ] && echo "-v") \
                2>"${temp_file}.err")
            
            local curl_exit=$?
            
            if [ $curl_exit -ne 0 ]; then
                echo "Error: curl failed with exit code $curl_exit" >&2
                if [ -n "$DEBUG" ] && [ -f "${temp_file}.err" ]; then
                    echo "Curl error output:" >&2
                    cat "${temp_file}.err" >&2
                fi
                rm -f "$temp_file" "${temp_file}.err" "$audio_temp" "$headers_file"
                return 1
            fi
            
            if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
                afplay "$audio_temp"
                rm -f "$temp_file" "${temp_file}.err" "$audio_temp" "$headers_file"
                return 0
            else
                echo "Error: API request failed (HTTP $http_code)" >&2
                rm -f "$temp_file" "${temp_file}.err" "$audio_temp" "$headers_file"
                return 1
            fi
        else
            echo "Error: afplay not found. --play option requires macOS." >&2
            rm -f "$temp_file"
            return 1
        fi
    else
        # standard mode: save to file then output
        local response_file=$(mktemp)
        local headers_file=$(mktemp)
        local http_code=$(curl -w "%{http_code}" -o "$response_file" -D "$headers_file" -X POST \
            "${API_URL}/${VOICE_ID}/stream?optimize_streaming_latency=${OPTIMIZE_STREAMING_LATENCY}" \
            -H "Content-Type: application/json" \
            -H "xi-api-key: ${API_KEY}" \
            -d "@$temp_file" \
            $([ -n "$DEBUG" ] && echo "-v") \
            2>"${temp_file}.err")
        
        local curl_exit=$?
        
        if [ $curl_exit -ne 0 ]; then
            echo "Error: curl failed with exit code $curl_exit" >&2
            if [ -n "$DEBUG" ] && [ -f "${temp_file}.err" ]; then
                echo "Curl error output:" >&2
                cat "${temp_file}.err" >&2
            fi
            rm -f "$temp_file" "${temp_file}.err" "$response_file"
            return 1
        fi
        
        if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
            # Check if stdout is a terminal
            if [ -t 1 ]; then
                echo "Warning: Binary output suppressed when writing to terminal." >&2
                echo "Use redirection to save the audio file:" >&2
                echo "  tts > output.mp3" >&2
                echo "Or use --play to play directly." >&2
                rm -f "$temp_file" "${temp_file}.err" "$response_file" "$headers_file"
                return 1
            else
                cat "$response_file"
            fi
            rm -f "$temp_file" "${temp_file}.err" "$response_file" "$headers_file"
            return 0
        else
            echo "Error: API request failed (HTTP $http_code)" >&2
            
            if [ -n "$DEBUG" ] && [ -f "$headers_file" ]; then
                echo "Response headers:" >&2
                cat "$headers_file" >&2
            fi
            
            if [ -s "$response_file" ]; then
                echo "Response body:" >&2
                cat "$response_file" >&2
            fi
            
            if [ -n "$DEBUG" ] && [ -f "${temp_file}.err" ]; then
                echo "Curl debug output:" >&2
                cat "${temp_file}.err" >&2
            fi
            
            case "$http_code" in
                401)
                    echo "Hint: Authentication failed. Check your API key." >&2
                    ;;
                403)
                    echo "Hint: Access forbidden. API key may lack permissions." >&2
                    ;;
                404)
                    echo "Hint: Voice ID '$VOICE_ID' not found." >&2
                    ;;
                429)
                    echo "Hint: Rate limit exceeded. Try again later." >&2
                    ;;
                500|502|503)
                    echo "Hint: Server error. ElevenLabs API may be down." >&2
                    ;;
            esac
            
            rm -f "$temp_file" "${temp_file}.err" "$response_file" "$headers_file"
            return 1
        fi
    fi
}

chunk_buffer=""
chunk_count=0
total_chars=0

# read from stdin line by line in chunks
while IFS= read -r line || [ -n "$line" ]; do
    if [ -n "$chunk_buffer" ]; then
        chunk_buffer="$chunk_buffer $line"
    else
        chunk_buffer="$line"
    fi
    
    if [ ${#chunk_buffer} -ge "$CHUNK_SIZE" ]; then
        chunk_count=$((chunk_count + 1))
        total_chars=$((total_chars + ${#chunk_buffer}))
        
        if ! process_chunk "$chunk_buffer" "$chunk_count"; then
            exit 1
        fi
        
        chunk_buffer=""
    fi
done

if [ -n "$chunk_buffer" ]; then
    chunk_count=$((chunk_count + 1))
    total_chars=$((total_chars + ${#chunk_buffer}))
    
    if ! process_chunk "$chunk_buffer" "$chunk_count"; then
        exit 1
    fi
fi

if [ $chunk_count -eq 0 ]; then
    echo "Error: No input text provided." >&2
    exit 1
fi

debug "Processed $chunk_count chunks, $total_chars total characters"